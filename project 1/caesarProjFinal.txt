# Project1 - CS647 - Spring 2023 - Group 5: Rudranil Maity, Vatsal Hemant Patel, Leela Sahitya Kalahasthi

.data
    PromptForPlaintext:
        .asciz  "Please enter the plaintext: "
        lenPromptForPlaintext = .-PromptForPlaintext

    PromptForShiftValue:
        .asciz  "Please enter the shift value: "
        lenPromptForShiftValue = .-PromptForShiftValue

    Newline:
        .asciz  "\n"

    ShiftValue:
        .int    0
.bss
    .comm   buffer, 102     # Buffer to read in plaintext/output ciphertext
    .comm   intBuffer, 4    # Buffer to read in shift value
                            # (assumes value is 3 digits or less)

.text

    .globl _start

    .type PrintFunction, @function
    .type ReadFromStdin, @function
    .type GetStringLength, @function
    .type AtoI, @function
    .type CaesarCipher, @function


    PrintFunction:
        pushl %ebp              # store the current value of EBP on the stack
        movl %esp, %ebp         # Make EBP point to top of stack

        # Write syscall
        movl $4, %eax           # syscall number for write()
        movl $1, %ebx           # file descriptor for stdout
        movl 8(%ebp), %ecx      # Address of string to write
        movl 12(%ebp), %edx     # number of bytes to write
        int $0x80

        movl %ebp, %esp         # Restore the old value of ESP
        popl %ebp               # Restore the old value of EBP
        ret                     # return

    ReadFromStdin:
        pushl %ebp              # store the current value of EBP on the stack
        movl %esp, %ebp         # Make EBP point to top of stack

        # Read syscall
        movl $3, %eax
        movl $0, %ebx
        movl 8(%ebp), %ecx      # address of buffer to write input to
        movl 12(%ebp), %edx     # number of bytes to write
        int  $0x80

        movl %ebp, %esp         # Restore the old value of ESP
        popl %ebp               # Restore the old value of EBP
        ret                     # return


    GetStringLength:

        # Strings which are read through stdin will end with a newline character. (0xa)
        # So look through the string until we find the newline and keep a count
        pushl %ebp              # store the current value of EBP on the stack
        movl %esp, %ebp         # Make EBP point to top of stack

        movl 8(%ebp), %esi      # Store the address of the source string in esi
        xor %edx, %edx          # edx = 0

        Count:
	    inc %edx            # increment edx
            lodsb               # load the first character into eax
            cmp $0xa, %eax  	# compare the newline character vs eax
            jnz Count           # If eax != newline, loop back

        dec %edx                # the loop adds an extra one onto edx
        movl %edx, %eax          # return value

        movl %ebp, %esp         # Restore the old value of ESP
        popl %ebp               # Restore the old value of EBP
        ret                     # return


    
    AtoI:
    	# Input is always read in as a string. 
	# This function should convert a string to an integer.
	
        pushl %ebp          	# store the current value of EBP on the stack
        movl %esp, %ebp     	# Make EBP point to top of stack
        xorl %eax, %eax     	# Initialize eax to 0
        xorl %ebx, %ebx     	# Initialize ebx to 0
        leal intBuffer, %esi	# Point esi to the first byte of intBuffer

        # While loop for processing the string digits
        ProcessLoop:
        	xor %eax, %eax      	  # Clear eax
        	lodsb               	  # Load next character
        	cmp $0xa, %al       	  # Compare with newline character
        	jz EndAtoI                # If newline, done
    		sub $0x30, %al      	  # Subtract ASCII value of '0'
    		imul $10, %ebx     	  # Multiply current result by 10
    		addl %eax, %ebx           # Add current digit to result
    		jmp ProcessLoop	          # jump to ProcessLoop to start operation for the next character
    	EndAtoI:
    		movl %ebx, ShiftValue     # Store the result in ShiftValue
		movl %ebp, %esp      	  # Restore the old value of ESP
		popl %ebp            	  # Restore the old value of EBP
		ret 

    CaesarCipher:
    # Input is always read in as a string. 
    # This function should shift a given plaintext by the stored shift value.
        pushl %ebp              # store the current value of EBP on the stack
        movl %esp, %ebp         # Make EBP point to top of stack
	xor %edx, %edx          # Initialize edx to 0
	movl ShiftValue, %eax 	# Load the shift value from the ShiftValue variable
	movl $26, %ebx          # Load 26 into ebx
	idivl %ebx              # Divides shift value by 26 to get remainder
	xor %eax, %eax          # Clear eax to 0
	leal buffer, %esi       # Point esi to the first byte of buffer
	leal buffer, %edi       # Point edi to the first byte of buffer
	
	ShiftLoop:		     #Loop start for each character from the buffer
		xor %eax, %eax       # Clear eax 
		lodsb                # Load the next character into eax
		cmp $0xa, %eax       # Compare with newline character
		jz EndShiftLoop      # If newline, done
		cmp $122, %eax       # Check if character greater than largest ascii value for the alphabet range
           	jg CheckNext         # if greater, move on to the next character
           	cmp $122, %eax       # Checks if character is within lowercase ASCII alphabet range (97 - 120)
		jl LowerCase         # If within that range, jump to LowerCase to check if upper case or lower case
	LowerCase:
		cmp $97, %eax	     # Checks if character is lowest lowercase character
		jl UpperCase         # If not, jump to Uppercase
		addl %edx, %eax      # Add the shift value
		cmp $122, %eax       # Checks to see if there is a overflow from the shift
                jg CheckOverflow     # If overflow, jump to CheckOverflow
                jmp CheckNext        # if no overflow, move on to next character
        UpperCase:
        	cmp $90, %eax        # Checks if character is above Uppercase ASCII alphabet range (97 - 120)
                jg CheckNext         # If not, move on to next character
                cmp $65, %eax        # Checks if character is under Uppercase ASCII alphabet range (97 - 120)
                jl CheckNext         # If not, move on to next character
                addl %edx, %eax      # Add the shift value
                cmp $90, %eax        # Checks to see if there is a overflow from the shift
                jg CheckOverflow     # If overflow, jump to Overflow
                jmp CheckNext        # if no overflow, move on to next character
	CheckNext:
		stosb                # Store the result in the output buffer
                jmp ShiftLoop        # Continue shifting characters
	CheckOverflow:
		subl $26, %eax       # if overflow, subtract by 26 to correct
                jmp CheckNext        # Move on to next character to be stored
        EndShiftLoop:
		movl %ebp, %esp      # Restore the old value of ESP
		popl %ebp            # Restore the old value of EBP
		ret		     # return
		
    _start:

        # Print prompt for plaintext
        pushl   $lenPromptForPlaintext
        pushl   $PromptForPlaintext
        call    PrintFunction
        addl    $8, %esp

        # Read the plaintext from stdin
        pushl   $102
        pushl   $buffer
        call    ReadFromStdin
        addl    $8, %esp

        # Print newline
        pushl   $1
        pushl   $Newline
        call    PrintFunction
        addl    $8, %esp


        # Get input string and adjust the stack pointer back after
        pushl   $lenPromptForShiftValue
        pushl   $PromptForShiftValue
        call    PrintFunction
        addl    $8, %esp

        # Read the shift value from stdin
        pushl   $4
        pushl   $intBuffer
        call    ReadFromStdin
        addl    $8, %esp

        # Print newline
        pushl   $1
        pushl   $Newline
        call    PrintFunction
        addl    $8, %esp



        # Convert the shift value from a string to an integer.
        # FILL IN HERE
        pushl	$intBuffer	# Pushing the address prompt for the memory stored in AtoI loop
	call	AtoI		# calling the AtoI function
	addl	$8, %esp


        # Perform the caesar cipheR
        # FILL IN HERE
        pushl	$buffer		# Pushing the address promt for the stored memory into the stack from CaeserCipher
	call	CaesarCipher	# Calling the CaesarCipher function
	addl	$8, %esp


        # Get the size of the ciphertext
        # The ciphertext must be referenced by the 'buffer' label
        pushl   $buffer
        call    GetStringLength
        addl    $4, %esp

        # Print the ciphertext
        pushl   %eax
        pushl   $buffer
        call    PrintFunction
        addl    $8, %esp

        # Print newline
        pushl   $1
        pushl   $Newline
        call    PrintFunction
        addl    $8, %esp

        # Exit the program
        Exit:
            movl    $1, %eax
            movl    $0, %ebx
            int     $0x80
